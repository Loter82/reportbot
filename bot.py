#!/usr/bin/env python3
import os
import json
import time
import datetime
import logging

import gspread
from google.oauth2.service_account import Credentials

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (Updater, CommandHandler, CallbackQueryHandler,
                          MessageHandler, Filters, ConversationHandler, CallbackContext)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, "7259566463:..."
SPREADSHEET_ID = os.environ.get("SPREADSHEET_ID")  # ID Google —Ç–∞–±–ª–∏—Ü—ñ
SERVICE_ACCOUNT_JSON = os.environ.get("SERVICE_ACCOUNT_JSON")  # JSON-—Ä—è–¥–æ–∫ –∑ –∫—Ä–µ–¥–µ–Ω—Ü—ñ–∞–ª–∞–º–∏

# –†–æ–∑–º–æ–≤–Ω—ñ —Å—Ç–∞–Ω–∏
(CHOOSING_LOCATION, CHOOSING_VIEW, CHOOSING_PERIOD, ENTERING_CUSTOM_DATES) = range(4)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø—Ä–æ—Å—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è)
user_states = {}

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Google –¢–∞–±–ª–∏—Ü–µ—é ---
def get_spreadsheet():
    scopes = ['https://www.googleapis.com/auth/spreadsheets',
              'https://www.googleapis.com/auth/drive']
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫—Ä–µ–¥–µ–Ω—Ü—ñ–∞–ª–∏ –∑ —Ä—è–¥–∫–∞ JSON —ñ–∑ SERVICE_ACCOUNT_JSON
    try:
        service_account_info = json.loads(SERVICE_ACCOUNT_JSON)
    except Exception as e:
        logger.error("Error parsing SERVICE_ACCOUNT_JSON: " + str(e))
        raise
    creds = Credentials.from_service_account_info(service_account_info, scopes=scopes)
    gc = gspread.authorize(creds)
    return gc.open_by_key(SPREADSHEET_ID)

def is_user_allowed(chat_id):
    try:
        ss = get_spreadsheet()
        users_sheet = ss.worksheet("USERS")
        data = users_sheet.get_all_values()
        # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ: –∫–æ–ª–æ–Ω–∫–∞ C (—ñ–Ω–¥–µ–∫—Å 2) ‚Äì Telegram ID, –∫–æ–ª–æ–Ω–∫–∞ G (—ñ–Ω–¥–µ–∫—Å 6) –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ "REPORT"
        for row in data[1:]:
            user_id = row[2].strip() if row[2] else ""
            permission = row[6].strip().upper() if row[6] else ""
            logger.info(f"USERS row: user_id={user_id}, permission={permission}")
            if user_id == str(chat_id) and permission == "REPORT":
                logger.info(f"User {chat_id} is allowed.")
                return True
    except Exception as e:
        logger.error("Error in is_user_allowed: " + str(e))
    logger.info(f"User {chat_id} is not allowed.")
    return False

def set_state(chat_id, state):
    user_states[str(chat_id)] = state
    logger.info(f"State saved for {chat_id}: {state}")

def get_state(chat_id):
    state = user_states.get(str(chat_id))
    logger.info(f"State retrieved for {chat_id}: {state}")
    return state

def compute_standard_period(period: str):
    today = datetime.date.today()
    if period == "–°—å–æ–≥–æ–¥–Ω—ñ":
        start = today
        end = today
    elif period == "–í—á–æ—Ä–∞":
        start = today - datetime.timedelta(days=1)
        end = start
    elif period == "–ú–∏–Ω—É–ª–∏–π —Ç–∏–∂–¥–µ–Ω—å":
        start = today - datetime.timedelta(days=today.weekday() + 7)
        end = start + datetime.timedelta(days=6)
    elif period == "–ú–∏–Ω—É–ª–∏–π –º—ñ—Å—è—Ü—å":
        first_day_this_month = today.replace(day=1)
        last_day_last_month = first_day_this_month - datetime.timedelta(days=1)
        start = last_day_last_month.replace(day=1)
        end = last_day_last_month
    else:
        start = today
        end = today
    return {"start": start.strftime("%d.%m.%Y"), "end": end.strftime("%d.%m.%Y")}

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---
def start_command(update: Update, context: CallbackContext) -> int:
    chat_id = update.effective_chat.id
    update.message.reply_text("–í—ñ—Ç–∞—î–º–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /report –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É –ø—Ä–æ —Ä—É—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤.")
    return ConversationHandler.END

def report_command(update: Update, context: CallbackContext) -> int:
    chat_id = update.effective_chat.id
    if not is_user_allowed(chat_id):
        update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—ñ–≤.")
        return ConversationHandler.END
    keyboard = [
        [InlineKeyboardButton("–ó–∞–≥–∞–ª—å–Ω–∏–π", callback_data="choose_location:–ó–∞–≥–∞–ª—å–Ω–∏–π")],
        [InlineKeyboardButton("–Ü–†–ü–Ü–ù–¨", callback_data="choose_location:–Ü–†–ü–Ü–ù–¨")],
        [InlineKeyboardButton("–ì–û–°–¢–û–ú–ï–õ–¨", callback_data="choose_location:–ì–û–°–¢–û–ú–ï–õ–¨")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–æ—á–∫—É –¥–ª—è –∑–≤—ñ—Ç—É:", reply_markup=reply_markup)
    set_state(chat_id, {"stage": "choose_location"})
    return CHOOSING_LOCATION

def choose_location_callback(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    _, location = query.data.split(":", 1)
    chat_id = query.message.chat.id
    state = get_state(chat_id) or {}
    state["location"] = location
    state["stage"] = "choose_view"
    set_state(chat_id, state)
    keyboard = [
        [InlineKeyboardButton("–°–¢–ò–°–õ–ò–ô", callback_data="choose_view:–°–¢–ò–°–õ–ò–ô")],
        [InlineKeyboardButton("–†–û–ó–ì–û–†–ù–£–¢–ò–ô", callback_data="choose_view:–†–û–ó–ì–û–†–ù–£–¢–ò–ô")]
    ]
    query.edit_message_text(text="–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –∑–≤—ñ—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSING_VIEW

def choose_view_callback(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    _, view_mode = query.data.split(":", 1)
    chat_id = query.message.chat.id
    state = get_state(chat_id) or {}
    state["viewMode"] = view_mode
    state["stage"] = "choose_period"
    set_state(chat_id, state)
    keyboard = [
        [InlineKeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ", callback_data="choose_period:–°—å–æ–≥–æ–¥–Ω—ñ")],
        [InlineKeyboardButton("–í—á–æ—Ä–∞", callback_data="choose_period:–í—á–æ—Ä–∞")],
        [InlineKeyboardButton("–ú–∏–Ω—É–ª–∏–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="choose_period:–ú–∏–Ω—É–ª–∏–π —Ç–∏–∂–¥–µ–Ω—å")],
        [InlineKeyboardButton("–ú–∏–Ω—É–ª–∏–π –º—ñ—Å—è—Ü—å", callback_data="choose_period:–ú–∏–Ω—É–ª–∏–π –º—ñ—Å—è—Ü—å")],
        [InlineKeyboardButton("–ó - –ü–û", callback_data="choose_period:–ó - –ü–û")]
    ]
    query.edit_message_text(text="–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –∑–≤—ñ—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSING_PERIOD

def choose_period_callback(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    _, period = query.data.split(":", 1)
    chat_id = query.message.chat.id
    state = get_state(chat_id) or {}
    state["periodType"] = period
    if period == "–ó - –ü–û":
        state["stage"] = "enter_custom_dates"
        set_state(chat_id, state)
        query.edit_message_text(text="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∞–±–æ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ dd.MM.yyyy –∞–±–æ dd.MM.yyyy-dd.MM.yyyy:")
        return ENTERING_CUSTOM_DATES
    else:
        state["stage"] = "completed"
        computed = compute_standard_period(period)
        state["startDate"] = computed["start"]
        state["endDate"] = computed["end"]
        set_state(chat_id, state)
        query.edit_message_text(text="–í–∞—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ó–≤—ñ—Ç —Ñ–æ—Ä–º—É—î—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ.")
        generate_report_from_params(state, chat_id, context)
        return ConversationHandler.END

def custom_dates(update: Update, context: CallbackContext) -> int:
    chat_id = update.effective_chat.id
    text = update.message.text
    parts = text.split("-")
    if len(parts) not in [1, 2]:
        update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ dd.MM.yyyy –∞–±–æ dd.MM.yyyy-dd.MM.yyyy")
        return ENTERING_CUSTOM_DATES
    state = get_state(chat_id) or {}
    state["periodType"] = "–ó - –ü–û"
    state["startDate"] = parts[0].strip()
    state["endDate"] = parts[1].strip() if len(parts) == 2 else parts[0].strip()
    state["stage"] = "completed"
    set_state(chat_id, state)
    update.message.reply_text("–í–∞—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ó–≤—ñ—Ç —Ñ–æ—Ä–º—É—î—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ.")
    generate_report_from_params(state, chat_id, context)
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# Dummy –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É ‚Äì —Ç—É—Ç —Ç—Ä–µ–±–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –≤–∞—à—É –ª–æ–≥—ñ–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF –∑—ñ –∑–≤—ñ—Ç–∞–º–∏
def generate_report_from_params(params: dict, chat_id: int, context: CallbackContext):
    logger.info(f"Generating report for chat {chat_id} with params: {json.dumps(params)}")
    # –¢—É—Ç –¥–æ–¥–∞–π—Ç–µ –≤–∞—à—É –ª–æ–≥—ñ–∫—É –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –∑ –¥–∞–Ω–∏—Ö Google Sheets
    time.sleep(2)  # –Ü–º—ñ—Ç–∞—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
    dummy_pdf = b"Dummy PDF content"  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π PDF (–±–∞–π—Ç–∏ —Ñ–∞–π–ª—É)
    send_report_to_telegram(dummy_pdf, "–ó–≤—ñ—Ç (—Å–∏–º—É–ª—è—Ü—ñ—è)", chat_id, context)

def send_report_to_telegram(pdf_file, report_title: str, chat_id: int, context: CallbackContext):
    context.bot.send_document(chat_id=chat_id, document=pdf_file, caption=f"üìÑ {report_title}")
    logger.info(f"Sent report to {chat_id}: {report_title}")

def start_polling():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("report", report_command)],
        states={
            CHOOSING_LOCATION: [CallbackQueryHandler(choose_location_callback, pattern="^choose_location:")],
            CHOOSING_VIEW: [CallbackQueryHandler(choose_view_callback, pattern="^choose_view:")],
            CHOOSING_PERIOD: [CallbackQueryHandler(choose_period_callback, pattern="^choose_period:")],
            ENTERING_CUSTOM_DATES: [MessageHandler(Filters.text & ~Filters.command, custom_dates)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    dp.add_handler(CommandHandler("start", start_command))
    dp.add_handler(conv_handler)

    updater.start_polling()
    logger.info("Bot started. Listening for commands...")
    updater.idle()

if __name__ == '__main__':
    start_polling()
